pipeline {
    agent any
   
    environment{
        DOCKER_TAG = getDockerTag()
    }

    stages{
    stage("SCM Checkout"){
        steps {
        git credentialsId: 'github',
            url: 'https://github.com/shashankkshukla/docker-jenkin',
            branch: 'master'
        }
    }
   stage('test') {
       steps {
     nodejs(nodeJSInstallationName: 'nodejs') {
       sh 'npm install --only=dev'
       sh 'npm test'
     }
     }
   }
        stage('Build Docker Image'){
            steps{
                sh "docker build . -t shashankshukla/jenkindockernodejs:${DOCKER_TAG} "
            }
        }
        stage('DockerHub Push'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerhub',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo $PASSWORD'
                    echo "${env.USERNAME}"
                    sh "docker login -u shashankshukla -p $PASSWORD"
                    sh "docker push shashankshukla/jenkindockernodejs:${DOCKER_TAG}"
                }
            }
        }

        /*stage('Deploy to k8s'){
            steps{
               
            sh "chmod +x changeTag.sh"
            sh "./changeTag.sh {DOCKER_TAG}"
            sshagent (credentials: ['kopscluster']) {
              sh "scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ec2-user@15.206.169.152:/home/ec2-user"
              script{
              try {
               sh "ssh ec2-user@15.206.169.152 kubectl apply -f ."
              }
              catch(error) {
              sh "ssh ec2-user@15.206.169.152 kubectl create -f ."
             }
            }
           }
          }
        }*/
		/*stage('Deploy to k8s'){
            steps{               
              kubernetesDeploy(
			  configs:'pods.yml',
			  kubeconfigId:'kopsconfig',
			  enableConfigSubstitution:true)
          }
        }
    }*/
    stage('Deploy to k8s'){
            steps{
	     sh "cd /var/lib/jenkins/workspace/pipeline-k8s/ingress"
	     sh "chmod +x changeTag.sh"
	     sh "./changeTag.sh ${DOCKER_TAG}"
             sh "kubectl apply -f /var/lib/jenkins/workspace/pipeline-k8s/ingress/nodeapp-v2-tag.yml"
          }
        }
    }
        post {
        cleanup {
            echo 'Cleaning up...'
            sh "docker system prune -f"
        }
    }
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}
